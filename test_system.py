#!/usr/bin/env python3
"""
Script test h·ªá th·ªëng nh·∫≠n di·ªán c·∫£m x√∫c
"""

import sys
import os
import json
from pathlib import Path

# Th√™m ƒë∆∞·ªùng d·∫´n ƒë·ªÉ import modules
sys.path.append(os.path.join(os.path.dirname(__file__), 'src', 'main'))

try:
    from src.main.emotion_detection import EmotionDetectionSystem
    print("‚úÖ Import EmotionDetectionSystem th√†nh c√¥ng")
except ImportError as e:
    print(f"‚ùå L·ªói import EmotionDetectionSystem: {e}")
    sys.exit(1)

def test_emotion_detection():
    """Test h·ªá th·ªëng nh·∫≠n di·ªán c·∫£m x√∫c"""
    print("\nüß™ B·∫Øt ƒë·∫ßu test h·ªá th·ªëng nh·∫≠n di·ªán c·∫£m x√∫c...")
    
    # Kh·ªüi t·∫°o h·ªá th·ªëng
    try:
        emotion_system = EmotionDetectionSystem()
        print("‚úÖ Kh·ªüi t·∫°o EmotionDetectionSystem th√†nh c√¥ng")
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi t·∫°o EmotionDetectionSystem: {e}")
        return False
    
    # Test v·ªõi ·∫£nh m·∫´u t·ª´ DeepFace
    test_images = [
        "src/data/images/test.jpg",
        "model/deepface/tests/dataset/img1.jpg",
        "model/deepface/tests/dataset/img2.jpg"
    ]
    
    for image_path in test_images:
        if os.path.exists(image_path):
            print(f"\nüì∏ Test v·ªõi ·∫£nh: {image_path}")
            
            try:
                # Test ph√¢n t√≠ch c·∫£m x√∫c
                result = emotion_system.analyze_emotion_from_image(image_path)
                
                if result.get('success', False):
                    print("‚úÖ Ph√¢n t√≠ch c·∫£m x√∫c th√†nh c√¥ng")
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    results = result.get('results', {})
                    if 'dominant_emotion' in results:
                        print(f"üé≠ C·∫£m x√∫c ch√≠nh: {results['dominant_emotion']}")
                    
                    if 'emotion' in results:
                        print("üìä Ph√¢n b·ªë c·∫£m x√∫c:")
                        for emotion, score in results['emotion'].items():
                            percentage = score * 100
                            print(f"   {emotion}: {percentage:.1f}%")
                else:
                    print(f"‚ùå Ph√¢n t√≠ch c·∫£m x√∫c th·∫•t b·∫°i: {result.get('error', 'Unknown error')}")
                
                # Test detect khu√¥n m·∫∑t
                face_result = emotion_system.detect_faces(image_path)
                if face_result.get('success', False):
                    print(f"üë• Ph√°t hi·ªán {face_result.get('faces_count', 0)} khu√¥n m·∫∑t")
                else:
                    print(f"‚ùå Ph√°t hi·ªán khu√¥n m·∫∑t th·∫•t b·∫°i: {face_result.get('error', 'Unknown error')}")
                
            except Exception as e:
                print(f"‚ùå L·ªói khi test ·∫£nh {image_path}: {e}")
        else:
            print(f"‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y ·∫£nh test: {image_path}")
    
    return True

def test_batch_analysis():
    """Test ph√¢n t√≠ch h√†ng lo·∫°t"""
    print("\nüìÅ Test ph√¢n t√≠ch h√†ng lo·∫°t...")
    
    try:
        emotion_system = EmotionDetectionSystem()
        
        # T√¨m c√°c ·∫£nh test
        test_images = []
        test_dirs = [
            "src/data/images",
            "model/deepface/tests/dataset"
        ]
        
        for test_dir in test_dirs:
            if os.path.exists(test_dir):
                for file in os.listdir(test_dir):
                    if file.lower().endswith(('.jpg', '.jpeg', '.png')):
                        test_images.append(os.path.join(test_dir, file))
                        if len(test_images) >= 3:  # Gi·ªõi h·∫°n 3 ·∫£nh ƒë·ªÉ test
                            break
        
        if test_images:
            print(f"üì∏ T√¨m th·∫•y {len(test_images)} ·∫£nh ƒë·ªÉ test")
            
            # Test ph√¢n t√≠ch h√†ng lo·∫°t
            results = emotion_system.analyze_multiple_emotions(test_images)
            
            # T√≠nh th·ªëng k√™
            statistics = emotion_system.get_emotion_statistics(results)
            
            print("üìä Th·ªëng k√™ ph√¢n t√≠ch h√†ng lo·∫°t:")
            print(f"   T·ªïng s·ªë ·∫£nh: {statistics['total_analyses']}")
            print(f"   Th√†nh c√¥ng: {statistics['successful_analyses']}")
            print(f"   T·ª∑ l·ªá th√†nh c√¥ng: {statistics['success_rate']*100:.1f}%")
            
            if statistics['emotion_distribution']:
                print("   Ph√¢n b·ªë c·∫£m x√∫c:")
                for emotion, count in statistics['emotion_distribution'].items():
                    print(f"     {emotion}: {count}")
            
            return True
        else:
            print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y ·∫£nh ƒë·ªÉ test")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói khi test ph√¢n t√≠ch h√†ng lo·∫°t: {e}")
        return False

def test_save_results():
    """Test l∆∞u k·∫øt qu·∫£"""
    print("\nüíæ Test l∆∞u k·∫øt qu·∫£...")
    
    try:
        emotion_system = EmotionDetectionSystem()
        
        # T·∫°o k·∫øt qu·∫£ m·∫´u
        sample_result = {
            "image_path": "test.jpg",
            "analysis_time": "2024-01-01T12:00:00",
            "model_used": "emotion",
            "detector_used": "opencv",
            "success": True,
            "results": {
                "dominant_emotion": "happy",
                "emotion": {
                    "angry": 0.01,
                    "disgust": 0.02,
                    "fear": 0.03,
                    "happy": 0.85,
                    "sad": 0.02,
                    "surprise": 0.05,
                    "neutral": 0.02
                }
            }
        }
        
        # L∆∞u k·∫øt qu·∫£
        output_path = "test_result.json"
        emotion_system.save_results(sample_result, output_path)
        
        # Ki·ªÉm tra file ƒë√£ ƒë∆∞·ª£c t·∫°o
        if os.path.exists(output_path):
            print("‚úÖ L∆∞u k·∫øt qu·∫£ th√†nh c√¥ng")
            
            # ƒê·ªçc v√† ki·ªÉm tra n·ªôi dung
            with open(output_path, 'r', encoding='utf-8') as f:
                loaded_result = json.load(f)
            
            if loaded_result == sample_result:
                print("‚úÖ N·ªôi dung file ch√≠nh x√°c")
            else:
                print("‚ùå N·ªôi dung file kh√¥ng kh·ªõp")
            
            # X√≥a file test
            os.remove(output_path)
            return True
        else:
            print("‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c file k·∫øt qu·∫£")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói khi test l∆∞u k·∫øt qu·∫£: {e}")
        return False

def test_deepface_import():
    """Test import DeepFace"""
    print("\nüîç Test import DeepFace...")
    
    try:
        from deepface import DeepFace
        print("‚úÖ Import DeepFace th√†nh c√¥ng")
        
        # Test c√°c model c√≥ s·∫µn
        print("üìã Ki·ªÉm tra c√°c model c√≥ s·∫µn:")
        
        # Test emotion model
        try:
            # T·∫°o ·∫£nh test ƒë∆°n gi·∫£n
            import numpy as np
            test_image = np.random.randint(0, 255, (224, 224, 3), dtype=np.uint8)
            
            # L∆∞u ·∫£nh test t·∫°m th·ªùi
            import cv2
            test_path = "temp_test.jpg"
            cv2.imwrite(test_path, test_image)
            
            # Test analyze (c√≥ th·ªÉ fail n·∫øu kh√¥ng detect ƒë∆∞·ª£c face, nh∆∞ng s·∫Ω test ƒë∆∞·ª£c import)
            try:
                result = DeepFace.analyze(
                    img_path=test_path,
                    actions=['emotion'],
                    detector_backend='opencv',
                    enforce_detection=False
                )
                print("‚úÖ DeepFace.analyze ho·∫°t ƒë·ªông")
            except Exception as e:
                print(f"‚ö†Ô∏è  DeepFace.analyze c√≥ l·ªói (c√≥ th·ªÉ do kh√¥ng detect ƒë∆∞·ª£c face): {e}")
            
            # X√≥a file test
            if os.path.exists(test_path):
                os.remove(test_path)
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Test DeepFace.analyze: {e}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå L·ªói import DeepFace: {e}")
        return False

def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y t·∫•t c·∫£ tests"""
    print("üé≠ H·ªá Th·ªëng Nh·∫≠n Di·ªán C·∫£m X√∫c - Test Suite")
    print("=" * 50)
    
    tests = [
        ("Test Import DeepFace", test_deepface_import),
        ("Test Emotion Detection", test_emotion_detection),
        ("Test Batch Analysis", test_batch_analysis),
        ("Test Save Results", test_save_results)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            if test_func():
                print(f"‚úÖ {test_name} PASSED")
                passed += 1
            else:
                print(f"‚ùå {test_name} FAILED")
        except Exception as e:
            print(f"‚ùå {test_name} ERROR: {e}")
    
    print(f"\n{'='*50}")
    print(f"üìä K·∫øt qu·∫£ test: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ T·∫•t c·∫£ tests ƒë·ªÅu PASSED! H·ªá th·ªëng s·∫µn s√†ng s·ª≠ d·ª•ng.")
        print("\nüöÄ ƒê·ªÉ kh·ªüi ƒë·ªông h·ªá th·ªëng:")
        print("   cd src/main")
        print("   python app.py")
        print("   Truy c·∫≠p: http://localhost:5000")
    else:
        print("‚ö†Ô∏è  M·ªôt s·ªë tests FAILED. Vui l√≤ng ki·ªÉm tra l·∫°i c√†i ƒë·∫∑t.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 